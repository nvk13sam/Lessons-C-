// УРОК 2. Функции и массивы

// 1. Находим максимум из 9 чисел
//****************1 способ***********************
// классический стихийный подход
// int a1 = 15;  
// int b1 = 21;
// int c1 = 39;
// int a2 = 12;
// int b2 = 23;
// int c2 = 33;
// int a3 = 166;
// int b3 = 23;
// int c3 = 38;
// int max = a1;
// if (b1 > max) max = b1;
// if (c1 > max) max = c1;

// if (a2 > max) max = a2;
// if (b2 > max) max = b2;
// if (c2 > max) max = c2;

// if (a3 > max) max = a3;
// if (b3 > max) max = b3;
// if (c3 > max) max = c3;
// Console.WriteLine(max);


//*********2 способ**********************
// // решение через метод
// int a1 = 15;  
// int b1 = 21;
// int c1 = 39;
// int a2 = 12;
// int b2 = 23;
// int c2 = 33;
// int a3 = 166;
// int b3 = 233;
// int c3 = 38;

// int Max(int arg1, int arg2, int arg3)
// {
//       int result = arg1;
//       if(arg2 > result) result = arg2;
//       if(arg3 > result) result = arg3;
//       return result;                     
// }
// // int max1 = Max(a1, b1, c1);  // это то же самое, что и код ниже int max = .....
// // int max2 = Max(a2, b2, c2);
// // int max3 = Max(a3, b3, c3);
// // int max = Max(max1, max2, max3); 
// int max = Max(
//       Max(a1, b1, c1), 
//       Max(a2, b2, c2), 
//       Max(a3, b3, c3));

// Console.WriteLine(max);

//***********************************************************************************
// 2. Ищем максимальный член массива

// int Max(int arg1, int arg2, int arg3)
// {
//       int result = arg1;
//       if(arg2 > result) result = arg2;
//       if(arg3 > result) result = arg3;
//       return result;                     
// }
//  //              0  1  2  3  4  5  6  7  8
// int[] array = { 61,82,53,54,55,806,87,88,779 };
// // array[0] = 12;  // как можно обратиться к массиву и записать в него значение
// // Console.WriteLine(array[0]); //вывести новое значение

// int max = Max(   //функция Max с большой буквы, а переменная с маленькой - max
//       Max(array[0], array[1], array[2]),
// 	Max(array[3], array[4], array[5]),  
// 	Max(array[6], array[7], array[8])

// );
// Console.WriteLine(max);
// // второй способ записи кода выше
// int result = Max(   
//       Max(array[0], array[1], array[2]),
// 	Max(array[3], array[4], array[5]),  
// 	Max(array[6], array[7], array[8])

// );
// Console.WriteLine(result);

//**********************************************************************************************
// 3. Ищем в массиве порядковый номер ячейки (индекс числа), допустим 12 и выводим только первую ячейку
//Имеется одномерный массив array из n элементов, требуется
// найти элемент массива, равный find
// 1. Установить счетчик index в позицию 0
// 2. Если array [index] = find, алгоритм завершил работу
// успешно.
// 3. Увеличить index на 1
// 4. Если index < n, то перейти к шагу 2. В противном случае
// алгоритм завершил работу безуспешно.


// //              0  1   2    3   4  5   6  7  8   9
// int[] array = { 7,12, 52, 453, 54, 55, 66, 7,12,12, 528 };

// int n = array.Length;
// int find = 12;// какое именно число надо найти

// int index = 0;

// while (index < n)
// {

// 	if(array[index] == find)
// 	{
// 		Console.WriteLine(index);
// 		//break;// если это убрать, то найдет все ячейки, где расположено 12
// 	}
// 	index++;
// }

//******************************************************************************
// 4. Метод void  -  Ищем в массиве случайных чисел через метод допустим 4 и выводим только индекс первой ячейки, где она встречается
//таким образом можно взять метод, передать в него массив 
//и заполнить массив нужным количеством элементов.
//адаптируем решение предыдущей задачи, в которой
//находили нужные элементы и позицию нужного элемента в массиве.


// void FillArray(int[] collection)  
// Шаг 2. Чтобы заполнить массив случайными числами,
// воспользуемся методом, который опишем сами:
// Начнём с ключевого слова void. Далее дадим наименование нашему методу FillArray - "заполнить массив". В качестве
// аргумента будет приниматься какая-то коллекция, то есть аргумент collection.

// {
//       int length = collection.Length; //Шаг 3. нам надо получить длину нашего массива. Делается это посредством collection.Length. 
//       int index = 0;      //Шаг 4. возьмём позицию index, которая по умолчанию будет начинаться с 0.       
//       while (index < length)  //Шаг 5. в цикле while пропишем index < length. 
//       	 {
//                   collection[index] = new Random().Next(1, 10); //Здесь генерируются случайные числа и добавляются в массив FillArray(int[] collection)
// 	   			    //обратимся к аргументу collection на позицию index и положим туда новое
//      				    //случайное число — целое число из диапазона 1–10.
	
//                   index++;  
//              }
// }

// void PrintArray(int[] col) //Шаг 6. Создаем метод, который будет печатать массив.
// // Аналогичным образом в качестве
// // аргумента здесь будет приходить массив. Обратите внимание, что здесь мы специально не
// // даём одинаковые имена, чтобы привыкнуть называть разные аргументы различными
// // именами. То есть в первом случае будет collection, а во втором, например, col

// {
// 	int count = col.Length;  //Количество элементов
// 	int position = 0;        //обозначим текущую позицию не через именование переменной index, а через position
// 	while (position < count)
// 	{
// 		Console.WriteLine(col[position]);  // выведем на экран значение текущего элемента, то есть col[position]
// 		position++;
// 	}
// }

// int IndexOf(int[] collection, int find) //Шаг 7.Метод  будет возвращать позицию, то есть index. Назовём этот метод IndexOf, 
// 		          //а в качестве аргумента будет приходить массив collection и какой-то элемент find.
// {
// 	int count = collection.Length;  //определяем количество элементов через count — collection.Length. 
// 	int index = 0;		 //индекс, чтобы щёлкать массив, это будет переменная index
// 	int position = -1;  	 //В position положим значение нашего индекса. 
// 			//если не встречается ни одного
// 			// элемента, то договоримся, что по умолчанию станет возвращаться значение -1. Это
// 			// искусственный приём. То есть, если элемента нет, значит, выйдет -1. Таким образом, если
// 			// запустить наш код, обнаружится значение позиции, равное -1. Это значит, что такой элемент
// 			// не найден. Например, если нам надо найти 444, его в массиве нет

// 	while (index < count)
// 	{
// 		if(collection[index] == find) //если collection[index] совпал с find, потребуется куда-то сохранить позицию (int position)
// 		{
// 			position = index;
// 			break;  //чтобы получать на экране 1 вхождение - через добавление оператора break, иначе покажет последнюю позицию 4 
// 		}
// 		index++;
// 	}
// 	return position;  // После того как этот цикл отработает, ожидаем return position, нашу позицию элемента.
// }

// int[] array = new int[10];  //Шаг 1. Сначала определим новый массив. Пусть это будет массив под именем array. Далее укажем,
// // что в этом массиве будет по умолчанию 10 элементов. Запомним новую конструкцию new int
// // [10], которая дословно означает «создай новый массив, где будет 10 элементов». По
// // умолчанию, кстати, он будет наполнен нулями.

// FillArray(array); //Протестируем наш метод. Для начала напишем FillArray и в качестве аргумента передадим
// 	   //наименование нашего массива
// array[4] = 4;     // 11. После того как мы заполнили всё случайными числами, принудительно добавим пару 4. Например, на четвёртую позицию и на шестую.
// array[6] = 4;

// PrintArray(array); // Затем вызовем следующий метод PrintArray, который будет распечатывать наш массив.
// Console.WriteLine(); // 9. Введём Console.WriteLine. Чтобы элементы выводились в столбик

// int pos = IndexOf(array, 4); //Шаг 8.Определим переменную pos и положим в неё результат работы метода IndexOf. 
// 	              //В качестве аргумента будет передаваться наш массив и число, например, будем искать 4
// Console.WriteLine(pos);    // 10. После того как метод отработает, на экране покажем pos. 

//**********************************************************************************
//4. та же задача, только без комментов
void FillArray(int[] collection)  
{
      int length = collection.Length; 
      int index = 0;          
      while (index < length)
      	{
                  collection[index] = new Random().Next(1, 10); 
                  index++;  
            }
}

void PrintArray(int[] col)
{
	int count = col.Length; 
	int position = 0;      
	while (position < count)
	{
		Console.Write(col[position] + ", ");  
		position++;
	}
}

int IndexOf(int[] collection, int find) 
{
	int count = collection.Length; 
	int index = 0;		 
	int position = -1;  	 

	while (index < count)
	{
		if(collection[index] == find) 
            {              
                  position = index;
			break;  
		}
		index++;
	}
	return position;  
}

int[] array = new int[10];
FillArray(array); 
array[9] = 4;     

PrintArray(array); 
Console.WriteLine(); 

int pos = IndexOf(array, 4); 
Console.WriteLine(pos);  

