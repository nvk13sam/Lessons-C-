// УРОК 4. Двумерные массивы и рекурсия
//********************************************************************************
//1. Напишем таблицу строк
// string[,] table = new string[2, 5]; //в масстве 2 строчки и 5 столбцов
// //String.Empty - инициализация строк происходит константой Empty
// //table[0,0] table[0,1] table[0,2] table[0,3] table[0,4]
// //table[1,0] table[1,1] table[1,2] table[1,3] table[1,4]  

// table[1, 2]= "слово"; //чтобы обратиться к элементу массива вводим его наименование и адрес

// for (int rows = 0; rows < 2; rows++) //rows - строки
// {
// 	for (int columns = 0; columns < 5; columns++)  //columns - столбцы
// 	{
// 		Console.WriteLine($"-{table[rows, columns]}-");
// 	}
// }
//**********************************************************************
//2. Заполнение двумерного массива нулями
// 
// int[,] matrix = new int[3, 4];
// for (int i = 0; i < 3; i++)
// {
//  	for (int j = 0; j < 4; j++)
//  	{
//  	Console.Write($"{matrix[i, j]} ", "\t" + "\n");
//  	}
// Console.WriteLine();	
// }

//*************************************************************************
//3. Как получить количество строк через GetLength.
// int[,] matrix = new int[8, 4];
// for (int i = 0; i < matrix.GetLength(0); i++)
// {
//  	for (int j = 0; j <  matrix.GetLength(1); j++)
//  	{
//  	Console.Write($"{matrix[i, j]} ");
//  	}
// Console.WriteLine();	
//}
//*************************************************************************************
//4. Заполнение матрицы случайными числами
// void PrintArray(int[,] matr)
// {
//  	for (int i = 0; i < matr.GetLength(0); i++)
//  	{
//  		for (int j = 0; j < matr.GetLength(1); j++)
//  		{
//  			Console.Write($"{matr[i, j]} ");
//  		}
//  	Console.WriteLine();
//  }
// }
// void FillArray(int[,] matr)
// {
//  	for (int i = 0; i < matr.GetLength(0); i++)
//  	{
//  		for (int j = 0; j < matr.GetLength(1); j++)
//  		{
//  			matr[i,j] = new Random().Next(1,10);//[1; 10) - 1 включается, 10 - нет
//  		}
//  	}
// }
// int[,] matrix = new int[3, 4];
// PrintArray(matrix);
// FillArray(matrix);
// Console.WriteLine();
// PrintArray(matrix);

//*************************************************************************************
//5. Закрашивание области

// int [,] pic = new int[,]
// {
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
//  {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };
// void PrintImage(int[,] image)
// {
// 	for (int i = 0; i < image.GetLength(0); i++)   //строки
// 	{
// 		for (int j = 0; j < image.GetLength(1); j++)  //столбцы
// 		{
// 			//Console.Write($"image[i, j]} "); 
// 			if (image[i,j] == 0) Console.Write($" ");
// 			else Console.Write($"*");
// 		}
// 	Console.WriteLine();
// 	}
// }	
// void FillImage(int row, int col) // в скобках указываем позицию строки и пикселя, с которого начнем закраску
// {
// 	if(pic[row, col] == 0)
// 	{
// 		pic[row, col] = 1;
// 		FillImage(row-1, col);
// 		FillImage(row, col-1);
// 		FillImage(row+1, col);
// 		FillImage(row, col+1);
// 	}
// }

// PrintImage(pic);
// FillImage(13, 13);
// PrintImage(pic);

//*************************************************************************************************************
//6. Вычисление факториала методом рекурсии (int)

// int Factorial (int n)
// {
// 	// 1! = 1
// 	// 0! = 1
// 	if(n == 1) return 1;
// 	else return n* Factorial(n-1);
// }
// for (int i = 1; i < 40; i++)
// {
// 	Console.WriteLine($"{i}! = {Factorial(i)}");
// }

//*************************************************************************************
//7. Вычисление факториала 40! методом рекурсии (double)

// double Factorial (double n)
// {
// 	// 1! = 1
// 	// 0! = 1
// 	if(n == 1) return 1;
// 	else return n* Factorial(n-1);
// }
// for (int i = 1; i < 40; i++)
// {
// 	Console.WriteLine($"{i}! = {Factorial(i)}");
// }
//****************************************************************************
//8. Вычисление числа Фибоначчи методом рекурсии

// f(1) = 1
// f(2) = 1
// f(3) = 2
// f(n) = f(n-1) + f(n-2)
double Fibonacci(double n)
{
	if (n == 1 || n == 2) return 1;
	else return Fibonacci(n-1) + Fibonacci(n-2);
}
for (double i = 1; i < 45; i++)
{
	Console.WriteLine($"f{i} = {Fibonacci(i)}");
}
